So sqli can be used in very colorful ways for exploitation. First one we'll be learning about is hidden data. Lets consider an e-commerce shop.
In the shop you have a link where your selected category for items you want to buy is gifts so the link looks something like this:

" https://insecure-website.com/products?category=Gifts "

this link causes the application to send an sql query and to return the relevant products from the database. The query might look like this:

" SELECT * FROM products WHERE category = 'Gifts' AND released = 1 "

 This SQL query asks the database to return:

    - all details (*)
    - from the products table
    - where the category is Gifts
    - and released is 1.

Notice the "released" portion of the query. Its equal to 1 which might imply that released is true hence displaying to us only the released products.
But by making a few changes to the link

" https://insecure-website.com/products?category=Gifts'-- "

We are essentially commenting out whatever is after the gifts part of the query. So our query will now look like:

" SELECT * FROM products WHERE category = 'Gifts'--' AND released = 1 "

everything after the -- are commented out. When we input this into our url we now see every product under the gifts category unreleased or released.

____________

Next up we have messing around with the applications logic. In many login pages we have a username and password as input, pretty normal.
We can enter a username and password such as yo and sup respectively and the query might look something like this:

" SELECT * FROM users WHERE username = 'yo' AND password = 'sup' "

Similar to how we messed with the query previously to dump unreleased and released products we can do the same here but instead we can do it for
logging in as a user. Lets say we have a user named Administrator and we dont know their password. Assuming that the input is not sanitized in the
login page we can type:" Administrator' -- ". Doing this we will effectively comment out the password portion and we wont even need a password.
The sql query will look like: 

" SELECT * FROM users WHERE username = 'Administrator'--' AND password = '' "

____________

The next type of attack is called a Union attack. We often see data displayed on a webpaged, this data is usually from a table in a database on 
the web server. The idea of a union attack is that we display data from other tables in the database on the place where the data was originally
shown. 

We do this using the UNION keyword. The UNION keyword allows you to use one or more SELECT statements and then append those results in the original
query.

" SELECT a, b FROM table1 UNION SELECT c, d FROM table2 "

This SQL query will return a single result set with two columns, containing values from columns a and b in table1 and columns c and d in table2.

For this sort of attack to work, you will need a column that is compatible with the data types we want to display. For example if the data type
column is an integer but our data that we want to display is a string then we will have to find another column that has a suitable data type for
our string data.

Another thing we need is that the number of columns we want to display must be the same as the number of column we have in our original query.
This however is not always the case, we might have just one column but we want to display multiple column data, and to get through that we can 
concatanate the strings, but thats for later.

Now to get started with all this we need to figure out two things to fulfil our above requirements, first is finding how many columns we have at
our disposal, second is finding out what columns can display what datatype.

There are two ways we can find how many columns there are, we'll only look at one. Lets consider our url to be:

" https://insecure-website.com/products?category=Gifts "

and the subsequent sql query to be:

" SELECT * FROM products WHERE category = 'Gifts' AND released = 1 "

We will see how to find this using the union and select commands on sql. So we want to end our original query with: ' UNION SELECT NULL--.
We want to do this such that our actual query comes out to be: 

" SELECT * FROM products WHERE category = 'Gifts' UNION SELECT NULL-- "

And if we get a server error, we will continue to add NULL to the query such that:

" SELECT * FROM products WHERE category = 'Gifts' UNION SELECT NULL, NULL-- "

We keep doing this until we can see our output displayed in the response, the number of NULL will denote the number of columns.

In the url will type something along the lines of:

" https://insecure-website.com/products?category=Gifts'+UNION+SELECT+NULL,NULL-- "


Next up we want to find out what column can display what datatype, its pretty simple. Instead of NULL on the query we type in a data that represents
the type of data we want to display. For example, i wanna see which column can display a string data type, so the data for me that i will type in
will be 'a' or "a" as it can properly represent a string data type. 

So in my actual query what I want is, assuming i have 3 columns:

" SELECT * FROM products WHERE category = 'Gifts' UNION SELECT 'a', NULL, NULL-- "

If the first column is not a string, it will return an error and I'll then replace the second NULL to see if the second column is a string, I will
continue to cycle through the columns in this manner until I find which column is a string. 

The reason we used NULL in the first place to find the number of columns is because NULL is almost like a universal datatype thingy, almost every 
datatype can take NULL as a value. 


Now we have all this info, the next step is to retrieve possibly sensitive data. Lets say in our webpage, we have 2 columns, both take strings.
Previously, we saw that to check if a data type is a string or not, if we wrote a string on the specified column, that string would be displayed
to us. We do the same here but this time we replaced the testing string with our actual data, so instead of attaching " ' UNION SELECT 'a', NULL-- "
we would attach " ' UNION SELECT username, password-- ". But see this username as password column, where does it come from? Exactly. We have to
specify the table it comes from, so we type " ' UNION SELECT username, password FROM users-- ", such that our actual query now looks like:

" SELECT * FROM products WHERE category = 'Gifts' UNION SELECT username, password FROM users-- ".

A lot of the times we might not have multiple columns to work with, we might just have one column to work with but we have to display multiple
columns of data, to get past this, we can use concatenation. Different database languages have different methods to concatenating data. concatenation
basically means that the two strings of data we have, will be put together and if we wish we can put a seperator between them to distinguish them.

For Oracle, this is done by writing in:

" ' UNION SELECT username || '~' || password FROM users-- "
and the data that will come out on the single column will look something like:

administrator~s3cure
wiener~peter
carlos~montoya

____________

